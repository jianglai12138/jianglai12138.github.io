<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>刷题心得</title>
      <link href="/2023/02/27/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/"/>
      <url>/2023/02/27/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/</url>
      
        <content type="html"><![CDATA[<p>1.字母大小写转化ASCII+-32<br>2.数字反转<br>输入123.4<br>输出4.321</p><p>…<br>float a,b&#x3D;0;<br>cin&gt;&gt;a;<br>int c&#x3D;a * 10;  &#x2F;&#x2F;使c变为整数<br>while(c){<br>    b&#x3D;b * 10+c%10;<br>    c&#x3D;c&#x2F;10;<br>}<br>cout&lt;&lt;b&#x2F;1000;<br>…</p><p>while循环<br>开始（1）c&#x3D;1234，b&#x3D;4，c&#x3D;123<br>（2）c&#x3D;123，b&#x3D;43，c&#x3D;12<br>（3）c&#x3D;12，b&#x3D;432，c&#x3D;1<br>（4）c&#x3D;1，b&#x3D;4321，c&#x3D;0<br>结束</p><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>c语言概况</title>
      <link href="/2023/02/25/c%E8%AF%AD%E8%A8%80%E6%A6%82%E6%8B%AC/"/>
      <url>/2023/02/25/c%E8%AF%AD%E8%A8%80%E6%A6%82%E6%8B%AC/</url>
      
        <content type="html"><![CDATA[<p>1.（1）自增运算符和自减运算符：  ++  - -<br>在变量前后有区别，例如<br>i &#x3D; 100;<br>op1 &#x3D; i++;  &#x2F;&#x2F; op1 &#x3D; 100，先 op1 &#x3D; i，然后 i &#x3D; i + 1<br>i &#x3D; 100;<br>op2 &#x3D; ++i;  &#x2F;&#x2F; op2 &#x3D; 101，先 i &#x3D; i + 1，然后赋值 op2<br>i &#x3D; 100;<br>op3 &#x3D; i- -;  &#x2F;&#x2F; op3 &#x3D; 100，先赋值 op3，然后 i &#x3D; i - 1<br>i &#x3D; 100;<br>op4 &#x3D; - -i;  &#x2F;&#x2F; op4 &#x3D; 99，先 i &#x3D; i - 1，然后赋值 op4<br>（2）条件运算符： ？<br>a？b：c  表示如果a成立，结果为b，否则为c。可以看作if-else理解<br>int  a,b &#x3D; 1,c &#x3D; 2;<br>if(a)<br>b &#x3D; 1;<br>else<br>c &#x3D; 2;</p><p>2.流程控制语句-分支<br>（1）if-else<br>（2）switch<br>switch(选择句){       &#x2F;&#x2F;选择句，标签都使用整型数据（可以为字母）<br>caes 标签1 : {语句1}  &#x2F;&#x2F;使用break；停止，否则一直运行下去。<br>case 标签2 : {语句2}<br>default : {语句3}<br>}<br>7.流程控制语句-循环<br>（1）for循环<br>for(初始值;循环条件;循环方式){<br>循环体;<br>}<br>（2）while循环<br>while（循环条件）{<br>循环体；<br>}<br>（3）do-while循环    &#x2F;&#x2F;与while循环相比先执行一次再判断循环条件<br>do{<br>循环体；<br>}while（循环条件）；</p><p>3.数组<br>（1）数组大小固定，不能随意改变。<br>（2）a[b],数组中的元素数量b一定是已知的常量。数组从a[0]开始到a[b-1]，共b个。<br>（3）数组之间不能直接赋值。<br>（4）多维数组：实质是数组的数组，通常使用for循环处理。</p><p>4.结构体<br>可以理解为自己定义的数据类型。<br>（1）定义（可以嵌套定义）<br>struct （结构名）{<br>（类型名） （成员名1）；<br>（类型名） （成员名2）；<br>}（变量名）；</p><p>struct （结构名）{<br>（类型名） （成员名1）；<br>（类型名） （成员名2）；<br>}；<br>struct （结构名）（变量名）；&#x2F;&#x2F;两个位置的变量不可重复定义<br>（2）变量初始化（变量之间可以直接赋值或进行运算）<br>（变量名）&#x3D;{初值表列}  &#x2F;&#x2F;根据结构体的成员元素类型和个数按顺序赋值，用“，”隔开，不能在结构体内赋初值。<br>（3）引用<br>（结构变量名）.（成员名）<br>（4）结构数组，赋初值时数组的每个元素（可用大括号括起来，方便查看）的每个成员不可忽略，不可跳过。<br>三种方式的引用<br>  结构数组名[下标].成员名<br> (*(结构数组名+下标)).成员名<br> (结构数组名+下标)-&gt;成员名</p><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>c with STL学习笔记</title>
      <link href="/2023/02/24/c-with-STL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/02/24/c-with-STL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>1.头文件：（1）万能头文件： #include&lt;bits&#x2F;stdc++.h&gt;<br>（2）加快c++中的输入输出：#define FIO ios::sync_with_stdio(0);cin.tie(0); &#x2F;&#x2F;不要忘记在main（）函数中写下：FIO;<br>（3）在c++中C语言程序加载库：#include <cstdio><br>（4）#define 是一种预处理命令，用于定义宏，本质上是文本替换.<br>2.使用标准库空间std： using namespace std;<br>3.不要使用endl（复杂拖延时间），改用\n：(1)头文件替换： #define endl ‘\n’<br>（2）直接输出’\n’</cstdio></p><hr><p>#容器</p><p>1.vector&lt;&gt;<br>动态可变长数组<br>vector&lt; int &gt; L &#x3D; {1,2,3,4,5};<br>&lt;图片001&gt;<br>（1）初始化<br>方法一：vector&lt; int &gt; L(n,100); &#x2F;&#x2F; L为名称，n为大小，100为初始值（可以省略，默认0）<br>方法二：vector&lt; int &gt; L &#x3D; {1,2,3};<br>方法三：vector&lt; int &gt; L；L.resize(n);</p><p>说明：resize(n)调整容器的大小，使其包含n个元素，如果n小于当前容器的大小，则将内容减少到其前n个元素，并删除超出范围的元素。</p><p>（2）输入<br>方法一：<br>int n;<br>vector&lt; int &gt; L;<br>for(int i&#x3D;0;i&lt;n;i++){<br>    int x;cin&gt;&gt;x;<br>    L.push_back(x);<br>}</p><p>说明：push_back（）函数将一个新的元素加到vector的最后面，位置为当前最后一个元素的下一个元素。</p><p>方法二：<br>int n;<br>vector&lt; int &gt; L(n);<br>for(int &amp;x:L){<br>    cin&gt;&gt;x;<br>}</p><p>说明：for(int a:b) 从数组b依次取出元素赋值给整型变量a，循环执行for中语句。<br>for(auto &amp;a:b)，循环体中修改a，b中对应内容也会修改。&#x2F;&#x2F;auto的原理就是根据后面的值，来自己推测前面的类型是什么。<br>auto的作用就是为了简化变量初始化，如果这个变量有一个很长很长的初始化类型，就可以用auto代替。<br>for(auto a:b)，循环体中修改a，b中内容不受影响。<br>for(const auto &amp;a:b)，a不可修改，用于只读取b中内容。</p><p>（3）遍历<br>方法一：<br>vector&lt; int &gt; L;<br>for(int i&#x3D;0;i&lt;L.size();i++){<br>    cout&lt;&lt;L[i]&lt;&lt;’\n’;<br>}</p><p>说明：L.size()为L的大小，为常数。</p><p>方法二：<br>vector&lt; int &gt; L;<br>for(auto i &#x3D; L.begin();i !&#x3D; L.end();i++){<br>    cout &lt;&lt; L[i] &lt;&lt; ‘\n’;<br>}</p><p>方法三：<br>vector&lt; int &gt; L;<br>for(int&amp; x:L){<br>    cout &lt;&lt; x &lt;&lt; ‘\n’;<br>}</p><p>（4）访问和修改<br>vector&lt; int &gt; L&#x3D;{1,2,3};<br>{<br>    int a &#x3D; L.at(0);   &#x2F;&#x2F;a&#x3D;1,L.at()不常用，知道即可。<br>    int b &#x3D; L[0];      &#x2F;&#x2F;b&#x3D;1<br>}</p><p>{<br>    int a &#x3D; L.front(); &#x2F;&#x2F;L.front()访问第一个数组。<br>    int b &#x3D; L.back();  &#x2F;&#x2F;L.back()访问最后一个数组。<br>}</p><p>L.push_back(4);&#x2F;&#x2F;L末尾加一个数组，其值为4，L:{1,2,3,4}<br>L.pop_back();&#x2F;&#x2F;去掉L末尾一个数组，L:{1,2,3}<br>L.emplace_back(4);&#x2F;&#x2F;功能与L.push_back(4)一样，逻辑不同。L:{1,2,3,4}<br>L.insert(L.begin(),5);&#x2F;&#x2F;插入一个值到某个数组，其后的数组的值往后移一位（末尾会增加一个数组）。L:{5,1,2,3,4}<br>L.erase(L.begin());&#x2F;&#x2F;删去L.begin()数组。L:{1,2,3,4}<br>L.erase(L.begin(),prew(L.end));&#x2F;&#x2F;删去L.begin()到prew(L.end)数组。L:{4}</p><p>说明：prew（）表示某个数组的前一个数组。</p><p>L.clear();&#x2F;&#x2F;清空数组。L:{}<br>L.empty();&#x2F;&#x2F;判断L是否为空。true</p><p>（5）二维矩阵<br>int n,m;<br>cin&gt;&gt;n&gt;&gt;m;<br>vector&lt;vector&lt; int &gt;&gt; L(n,vector&lt; int &gt;(m,0));&#x2F;&#x2F;得到n*m的二维矩阵，值为0。</p><p>2.string<br>（1）使用。<br>与c语言中的字符数组类似。<br>string s;<br>cin &gt;&gt; s;<br>s &#x3D; “hello world”;</p><p>s[0];&#x2F;&#x2F;‘h’<br>s.at(0);&#x2F;&#x2F;‘h’<br>s.front();&#x2F;&#x2F;‘h’<br>s.back();&#x2F;&#x2F;‘d’</p><p>s &#x3D; “abc”;<br>s.size();&#x2F;&#x2F;3<br>s.length();&#x2F;&#x2F;3,与s.size()功能相同。<br>s.empty();&#x2F;&#x2F;false</p><p>s &#x3D; “hello”;<br>s.clear();&#x2F;&#x2F;“”，清空。</p><p>s.insert(s.begin(),’c’);&#x2F;&#x2F;“chello”<br>s.insert(1,2,’p’);&#x2F;&#x2F;“cpphello”，在1的位置插入2个p。</p><p>s.erase(3);&#x2F;&#x2F;“cpp”，删掉3及其后面的字符。<br>s.erase(0,2);&#x2F;&#x2F;“p”，从0开始删除2个字符。<br>s.erase(s.begin(),s.end());&#x2F;&#x2F;“”，删除begin到end字符。</p><p>s &#x3D; “hello”;<br>s.push_back(‘x’);&#x2F;&#x2F;“hellox”<br>s.pop_back();&#x2F;&#x2F;“hello”</p><p>s +&#x3D; ‘ ‘;&#x2F;&#x2F;“hello “<br>s +&#x3D; “world”;&#x2F;&#x2F;“hello world”</p><p>注意尽量不要使用s &#x3D; s + “wo”类似语句，加大算法。</p><p>s.replace(0,5,”HELLO”);&#x2F;&#x2F;“HELLO world”，从0开始的5个字符替换为HELLO。</p><p>s &#x3D; “cppjava”;<br>s.substr(3);&#x2F;&#x2F;“java”，保留3及其以后字符。<br>s.substr(0,3);&#x2F;&#x2F;“cpp”,保留从0开始的3个字符。</p><p>s.find(“java”);&#x2F;&#x2F;3，查找字符的起始位置。<br>没找到时&#x2F;&#x2F;string::npos</p><p>string a &#x3D; “hello”;<br>string b &#x3D; “hello”;<br>if(a&#x3D;&#x3D;b){<br>    &#x2F;&#x2F;true，可以直接判断。<br>}</p><p>(2)数值转换<br>string s &#x3D; “123”;<br>int a &#x3D; stoi(s);&#x2F;&#x2F;将s转化为int类型。<br>long long b &#x3D; stoll(s);&#x2F;&#x2F;将s转化为long long类型。<br>double d &#x3D; stod(s);&#x2F;&#x2F;将s转化为double类型。</p><p>int x &#x3D; 1234;<br>string x_str &#x3D; to_string(x);&#x2F;&#x2F;将int类型转化为string类型。</p><p>（3）遍历<br>string s;<br>for(int i &#x3D; 0;i &lt; s.size();i++){<br>    char c &#x3D; s[i];<br>}<br>或<br>for(char c:s){</p><p>}</p><p>3.map&lt; Key,value &gt;<br>从Key映射到value。<br>（1）基本存取<br>map&lt; string,int &gt; mp;&#x2F;&#x2F;从string类型映射到int类型。</p><p>for(int i &#x3D; 0;i &lt; n;i++){<br>    string name;int age;<br>    cin&gt;&gt;name&gt;&gt;age;<br>    mp[name] &#x3D; age;&#x2F;&#x2F;从name映射到age；<br>}</p><p>mp[“Alice”] &#x3D; 14;&#x2F;&#x2F;string 的 Alice 映射到 int 的 14。<br>mp[“Bob”] &#x3D; 8;</p><p>cout &lt;&lt; mp[“Alice”]&lt;&lt; ‘\n’;&#x2F;&#x2F;14</p><p>(2)修改，删除<br>mp[“Alice”] &#x3D; 14;<br>mp[“Alice”] &#x3D; 15;&#x2F;&#x2F;直接修改。<br>cout&lt;&lt;mp[“Alice”];&#x2F;&#x2F;15</p><p>mp.erase(“Alice”);&#x2F;&#x2F;删除所有mp。<br>cout &lt;&lt; mp.count(“Alice”);&#x2F;&#x2F;0</p><p>说明：mp.count()指的是mp的个数。</p><p>cout &lt;&lt; mp[“Alice”];&#x2F;&#x2F;0，没有mp时，会创建一个为0的mp。<br>cout &lt;&lt; mp.count(“Alice”);&#x2F;&#x2F;1</p><p>（3）查看<br>mp[“Alice”] &#x3D; 15;<br>if(mp.find(“Alice”) !&#x3D; mp.end()){</p><p>}<br>或<br>if(mp.count(“Alice”)){</p><p>}</p><p>(4)遍历<br>map&lt; string,int &gt;mp;<br>for(auto x &#x3D; mp.begin(); x !&#x3D; mp.end();x++){<br>    string key &#x3D; x-&gt;first;<br>    int value &#x3D; x-&gt;second;<br>}<br>或<br>for(auto x : mp){<br>    string key &#x3D; x.first;<br>    int value &#x3D; x.second;<br>}<br>或<br>for(auto&amp; [k,v] : mp){ &#x2F;&#x2F;推荐该方式<br>    string key &#x3D; k;<br>    int value &#x3D; v;<br>}</p><p>3.ceil()<br>向上取整，可用于时间计算等。<br>（数据类型）ceil（n）<br>当n&#x3D;1.1时，ceil（）函数输出2；</p><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>c++课堂笔记</title>
      <link href="/2023/02/22/c++%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/02/22/c++%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><b>第一课时</b></p><ul><li>1.c++语言的头文件扩展名是  .h<br>c++语言的源程序文件的扩展名是  .cpp</li><li>2.c++使用cin和cout进行输入输出必须包含的头文件是  iostream<br>c++语言程序中使用控制符setw进行格式输出时应包含的头文件是  iomanip</li><li>3.cin和cout为c++中预定义的对象。<br>  “&gt;&gt;”称为流插入运算符，执行输入功能。<br>  “&lt;&lt;”称为流输出运算符，执行输出功能。</li><li>4.const与dedine定义变量的区别：（1）const与dedine都可以在c++中定义变量。<br>（2）const要定义常量的类型，define则不需要。如：#define PI 3.1415926，const float PI&#x3D;3.1415926;<br>（3）define不分配内存，const在静态存储区中分配空间。</li><li>5.（1）endl相当于\n<br>（2）setw(int n)是c++中在输出操作中使用的字段宽度设置，设置输出的域宽，n表示字段宽度。只对紧接着的输出有效，紧接着的输出结束后又变回默认的域宽。<br>当后面紧跟着的输出字段长度小于n的时候，在该字段前面用空格补齐（默认为右对齐）；当输出字段长度大于n时，全部整体输出。<br>（3）setfill（‘$’）表示将代替空格填充为$。<br>（3）left左对齐，right右对齐，都对于整个语句有效。<br>（4）setprecision(int n)，表示输出浮点值n位有效数字，可以四舍五入，只对邻近的有效。<br>（5）fixed写在setprecision(int n)之前，将输出浮点值n位，改为浮点值小数点后的n位。</li><li>6.dec表示十进制，hex表示十六进制，oct表示八进制。</li></ul><hr><p><b>第二课时</b></p><p>预习</p><ul><li>1.函数原型<br>在c语言中，函数定义：函数类型 函数名（形参列表）{ 函数体 }<br>函数原型：函数类型 函数名（形参列表）；其也可称为为 函数类型：函数首部；<br>函数原型的作用：可以避免函数先调用后定义的错误，即当函数原型在函数调用前时，可以先调用后定义。</li><li>2.函数重载<br>overload直译为重载，为了方便理解，可意译为多态，即多种形态。因此函数重载理解为同一函数多种形态。<br>函数重载条件：函数名相同，参数类型或参数个数不同。与函数类型无关，判断时忽略。<br>例如void f1(int a);与void f1(double d);是函数重载。<br>int max(int a);与int max(int a,int b);是。<br>void f2(int a);与int f2(int a);不是.<br>一般用于相同类型的运算，但具体功能有些差别的函数。</li><li>3.作用域运算符 ::<br>当程序中外部变量与内部变量重名时，内部变量屏蔽外部变量。<br>如果将变量x前加::,即变为::x输出时，则可输出外部变量。</li></ul><p>上课内容</p><p>课堂代码<br>#include&lt; iostream &gt;<br>using namespace std;<br>void area(int);<br>void area(int,int);<br>void area(int,int,int);<br>int main(){<br>int r,a,b,x,y,h;<br>cin&gt;&gt;r&gt;&gt;a&gt;&gt;b&gt;&gt;x&gt;&gt;y&gt;&gt;h;<br>area(r);<br>area(a,b);<br>area(x,y,h);<br>return 0;<br>}<br>void area(int r){<br>cout&lt;&lt;”圆的面积是：”&lt;&lt;r * r * 3.14&lt;&lt;endl;<br>}<br>void area(int a,int b){<br>cout&lt;&lt;”长方形的面积是：”&lt;&lt;a*b&lt;&lt;endl;<br>}<br>void area(int x,int y,int h){<br>cout&lt;&lt;”梯形的面积是：”&lt;&lt;(x+y)*h&#x2F;2.0&lt;&lt;endl;<br>}</p><p><b>第三课时</b></p><p>预习</p><ul><li><p>1.内置函数<br>又称内嵌函数，内联函数。其作用是使代码嵌入主调函数，省去函数调用的开销，即减少函数频繁调用消耗的时间，提高效率。<br>多用于频繁使用，且功能简单的函数。与普通函数相比，多出个inline，即<br>inline 函数类型 函数名 （形参列表）<br>  {函数体}</p></li><li><p>2.变量的引用<br>变量的引用就是变量的别名，因此引用又称别名。<br>引用的声明<br>数据类型 &amp;引用名&#x3D;已定义的变量名<br>int a &#x3D; 10;<br>int &amp;ra &#x3D; a;&#x2F;&#x2F;引用的数据类型必须与已定义的相同</p></li><li><p>3.引用传递<br>值传递<br>void f(int a);<br>地址传递<br>void f(int *p);<br>引用传递<br>void f(int &amp;r);<br>当引用作为函数的形参时，对应实参形参占用同一单元，形参与实参对应变化。</p></li></ul><hr>]]></content>
      
      
      
    </entry>
    
    
  
  
    
  
</search>
